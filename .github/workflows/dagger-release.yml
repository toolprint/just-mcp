name: Dagger Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true

permissions:
  contents: write

jobs:
  release-all-platforms:
    name: Build All Platform Releases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Install Dagger CLI
        run: |
          cd /usr/local
          curl -L https://dl.dagger.io/dagger/install.sh | sudo sh
          dagger version

      - name: Run CI pipeline first
        run: |
          dagger call ci --source .

      - name: Build all platform releases in parallel
        run: |
          echo "ðŸš€ Building all platforms in parallel using Dagger..."
          dagger call release-zigbuild --source . --version ${{ steps.get_version.outputs.VERSION }} export --path ./release-artifacts/

      - name: Create checksums
        run: |
          cd release-artifacts
          sha256sum *.tar.gz > checksums.txt
          echo "ðŸ“„ Checksums:"
          cat checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/*

  create-release:
    name: Create GitHub Release
    needs: [release-all-platforms]
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}